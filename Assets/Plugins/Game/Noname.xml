<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Noname</name>
    </assembly>
    <members>
        <member name="T:Noname.BitConversion.IInheritableReliableBitConverter`1">
            <summary>
            Represents a modification of <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> that can convert derived types.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.IInheritableReliableBitConverter`1.SetInstance(`0,System.Byte[],System.Int32@)">
            <summary>
            Sets a specified instance by specified bytes and increases a specified index by the number of converted bytes.
            </summary>
            <param name="instance">The instance to set by specified bytes.</param>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.InheritableReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.InheritableReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.InheritableReliableBitConverter.GetInstance``1(Noname.BitConversion.InheritableVariableLengthBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.InheritableReliableBitConverter`1"/>.
            </summary>
            <param name="underlyingBitConverter">The underlying <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.InheritableReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.InheritableReliableBitConverter`1">
            <summary>
            Represents a modification of <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> that can convert derived types.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.InheritableReliableBitConverter`1.SetInstance(`0,System.Byte[],System.Int32@)">
            <summary>
            Sets a specified instance by specified bytes and increases a specified index by the number of converted bytes.
            </summary>
            <param name="instance">The instance to set by specified bytes.</param>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter.GetInstance``1(Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts an <see cref="T:System.Array"/> to a sequence of bytes and vice versa. The converter writes the number of elements as 32-bit signed integer and only after that writes the bytes of the instance.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Array"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1.GetByteCount(`0[])">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1.GetBytes(`0[],System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter.GetInstance``1(Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Array"/> instances to a sequence of bytes and vice versa.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Array"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.GetByteCount(`0[])">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.GetBytes(`0[],System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.GetByteCount(System.Int32)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="count">The number of elements of the <see cref="T:System.Array"/>.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ArrayVariableLengthBitConverter`1.GetItemCount(System.Int32)">
            <summary>
            Calculates the number of elements that gets from a specified number of bytes.
            </summary>
            <param name="count">The number of the bytes.</param>
            <returns>The number of elements that gets from a specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is not a valid number of bytes.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter.GetInstance``1(Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.ICollection`1"/> instances to a sequence of bytes and vice versa.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.GetByteCount(System.Collections.Generic.ICollection{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.GetBytes(System.Collections.Generic.ICollection{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.GetByteCount(System.Int32)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="count">The number of elements of the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionVariableLengthBitConverter`1.GetItemCount(System.Int32)">
            <summary>
            Calculates the number of elements that gets from a specified number of bytes.
            </summary>
            <param name="count">The number of the bytes.</param>
            <returns>The number of elements that gets from a specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is not a valid number of bytes.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter.GetInstance``1(Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts an <see cref="T:System.Collections.Generic.ICollection`1"/> to a sequence of bytes and vice versa. The converter writes the number of elements as 32-bit signed integer and only after that writes the bytes of the instance.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1.GetByteCount(System.Collections.Generic.ICollection{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1.GetBytes(System.Collections.Generic.ICollection{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ICollectionReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter.GetInstance``1(Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a sequence of bytes and vice versa. The converter writes the number of elements as 32-bit signed integer and only after that writes the bytes of the instance.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1.GetByteCount(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1.GetBytes(System.Collections.Generic.IEnumerable{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter.GetInstance``1(Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Returns an <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.</param>
            <returns>An <see cref="T:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances to a sequence of bytes and vice versa.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.GetByteCount(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.GetBytes(System.Collections.Generic.IEnumerable{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.GetByteCount(System.Int32)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="count">The number of elements of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.IEnumerableVariableLengthBitConverter`1.GetItemCount(System.Int32)">
            <summary>
            Calculates the number of elements that gets from a specified number of bytes.
            </summary>
            <param name="count">The number of the bytes.</param>
            <returns>The number of elements that gets from a specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is not a valid number of bytes.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairBitConverter">
            <summary>
            Provides methods for <see cref="T:System.Collections.Generic.KeyValuePair`2"/> bit converters initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairBitConverter.GetInstance``2(Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2"/>.
            </summary>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of keys.</param>
            <param name="valueBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBitConverter"/> is null or <paramref name="valueBitConverter"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairBitConverter.GetInstance``2(Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2"/>.
            </summary>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of keys.</param>
            <param name="valueBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBitConverter"/> is null or <paramref name="valueBitConverter"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairBitConverter.GetInstance``2(Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2"/>.
            </summary>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of keys.</param>
            <param name="valueBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBitConverter"/> is null or <paramref name="valueBitConverter"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairBitConverter.GetInstance``2(Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2"/>.
            </summary>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of keys.</param>
            <param name="valueBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBitConverter"/> is null or <paramref name="valueBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances to a sequence of bytes and vice versa. The converter is suitable for pairs which key converts to a sequence of variable number of bytes and value that converts to a sequence of of the same number of bytes.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2.GetByteCount(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2.GetBytes(System.Collections.Generic.KeyValuePair{`0,`1},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthConstantLengthBitConverter`2.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances to a sequence of bytes and vice versa. The converter is suitable for pairs which key converts to a sequence of of the same number of bytes and value that converts to a sequence of variable number of bytes.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2.GetByteCount(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2.GetBytes(System.Collections.Generic.KeyValuePair{`0,`1},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthVariableLengthBitConverter`2.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances to a sequence of bytes and vice versa. The converter is suitable for pairs which key and value that converts to a sequence of variable number of bytes.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2.GetByteCount(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2.GetBytes(System.Collections.Generic.KeyValuePair{`0,`1},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairVariableLengthVariableLengthBitConverter`2.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter.GetInstance``2(Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter{``0,``1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2"/> of elements.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.Dictionary`2"/> instnces to a sequence of bytes and vice versa.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.GetByteCount(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.GetBytes(System.Collections.Generic.Dictionary{`0,`1},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.GetByteCount(System.Int32)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="count">The number of elements of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryVariableLengthBitConverter`2.GetItemCount(System.Int32)">
            <summary>
            Calculates the number of elements that gets from a specified number of bytes.
            </summary>
            <param name="count">The number of the bytes.</param>
            <returns>The number of elements that gets from a specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is not a valid number of bytes.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter.GetInstance``2(Noname.BitConversion.IReliableBitConverter{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2">
            <summary>
            Represents a bit converter that converts a <see cref="T:System.Collections.Generic.Dictionary`2"/> to a sequence of bytes and vice versa. The converter writes the number of elements as 32-bit signed integer and only after that writes the bytes of the instance.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2.GetByteCount(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2.GetBytes(System.Collections.Generic.Dictionary{`0,`1},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.DictionaryReliableBitConverter`2.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances to a sequence of bytes and vice versa. The converter is only suitable for pairs which key and value converts to a sequence of bytes with an identical number of bytes.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2.GetInstance(Noname.BitConversion.ConstantLengthBitConverter{`0},Noname.BitConversion.ConstantLengthBitConverter{`1})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2"/>.
            </summary>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of keys.</param>
            <param name="valueBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBitConverter"/> is null or <paramref name="valueBitConverter"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2.GetBytes(System.Collections.Generic.KeyValuePair{`0,`1},System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.KeyValuePairConstantLengthConstantLengthBitConverter`2.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter.GetInstance``1(Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts a <see cref="T:System.Collections.Generic.List`1"/> to a sequence of bytes and vice versa. The converter writes the number of elements as 32-bit signed integer and only after that writes the bytes of the instance.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.IReliableBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1.GetByteCount(System.Collections.Generic.List{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1.GetBytes(System.Collections.Generic.List{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter.GetInstance``1(Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1"/>.
            </summary>
            <param name="itemBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Collections.Generic.List`1"/> instances to a sequence of bytes and vice versa.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.ItemBitConverter">
            <summary>
            The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of elements.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.GetByteCount(System.Collections.Generic.List{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.GetBytes(System.Collections.Generic.List{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.GetByteCount(System.Int32)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="count">The number of elements of the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Collections.Generic.ListVariableLengthBitConverter`1.GetItemCount(System.Int32)">
            <summary>
            Calculates the number of elements that gets from a specified number of bytes.
            </summary>
            <param name="count">The number of the bytes.</param>
            <returns>The number of elements that gets from a specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is not a valid number of bytes.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.NullableBitConverter">
            <summary>
            Provides methods for nullable instances initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.NullableBitConverter.GetInstance``1(Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.NullableConstantLengthBitConverter`1"/>.
            </summary>
            <param name="underlyingBitConverter">The underlying <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.NullableConstantLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingBitConverter"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.NullableBitConverter.GetInstance``1(Noname.BitConversion.VariableLengthBitConverter{``0})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.NullableVariableLengthBitConverter`1"/>.
            </summary>
            <param name="underlyingBitConverter">The underlying <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.NullableVariableLengthBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.NullableConstantLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts <see cref="T:System.Nullable`1"/> instances to a sequence of bytes and vice versa. The converter requires underlying <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.NullableConstantLengthBitConverter`1.GetByteCount(System.Nullable{`0})">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.NullableConstantLengthBitConverter`1.GetBytes(System.Nullable{`0},System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.NullableConstantLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.NullableVariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts class instances to a sequence of bytes and vice versa. The converter requires underlying <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.System.NullableVariableLengthBitConverter`1.GetByteCount(`0)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.NullableVariableLengthBitConverter`1.GetBytes(`0,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.NullableVariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.TimeSpanBitConverter">
            <summary>
            Represents a bit converter that converts values of the <see cref="T:System.TimeSpan"/> type to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.TimeSpanBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.TimeSpan"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.TimeSpanBitConverter.GetBytes(System.TimeSpan,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.TimeSpanBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.DateTimeBitConverter">
            <summary>
            Represents a bit converter that converts values of the <see cref="T:System.DateTime"/> type to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.DateTimeBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.DateTimeBitConverter.GetBytes(System.DateTime,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.DateTimeBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.StringBitConverter">
            <summary>
            Represents a bit converter that converts strings to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UnicodeInstance">
            <summary>
            The converter of instances of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-16.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UnicodeReliableInstance">
            <summary>
            The <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> values of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-16.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.ASCIIInstance">
            <summary>
            The converter of instances of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses ASCII.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.ASCIIReliableInstance">
            <summary>
            The <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> values of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses ASCII.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF7Instance">
            <summary>
            The converter of instances of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-7.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF7ReliableInstance">
            <summary>
            The <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> values of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-7.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF8Instance">
            <summary>
            The converter of instances of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-8.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF8ReliableInstance">
            <summary>
            The <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> values of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-8.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF32Instance">
            <summary>
            The converter of instances of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-32.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.StringBitConverter.UTF32ReliableInstance">
            <summary>
            The <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> values of the <see cref="T:System.String"/> type. The <see cref="T:Noname.BitConversion.System.StringBitConverter"/> uses UTF-32.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.StringBitConverter.GetInstance(System.Text.Encoding)">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.System.StringBitConverter"/>.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of string.</param>
            <returns>A <see cref="T:Noname.BitConversion.System.StringBitConverter"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.StringBitConverter.GetByteCount(System.String)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.StringBitConverter.GetBytes(System.String,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.StringBitConverter.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.DoubleBitConverter">
            <summary>
            Represents a bit converter that converts double-precision floating point numbers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.DoubleBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.DoubleBitConverter.GetBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.DoubleBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.SingleBitConverter">
            <summary>
            Represents a bit converter that converts single-precision floating point numbers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.SingleBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.SingleBitConverter.GetBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.SingleBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.UInt64BitConverter">
            <summary>
            Represents a bit converter that converts 64-bit unsigned integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.UInt64BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.UInt64"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.UInt64BitConverter.GetBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.UInt64BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Int64BitConverter">
            <summary>
            Represents a bit converter that converts 64-bit signed integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.Int64BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Int64"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Int64BitConverter.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Int64BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.UInt32BitConverter">
            <summary>
            Represents a bit converter that converts 32-bit unsigned integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.UInt32BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.UInt32"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.UInt32BitConverter.GetBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.UInt32BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Int32BitConverter">
            <summary>
            Represents a bit converter that converts 32-bit signed integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.Int32BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Int32"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Int32BitConverter.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Int32BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.CharBitConverter">
            <summary>
            Represents a bit converter that converts chars to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.CharBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Char"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.CharBitConverter.GetBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.CharBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.UInt16BitConverter">
            <summary>
            Represents a bit converter that converts 16-bit unsigned integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.UInt16BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.UInt16"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.UInt16BitConverter.GetBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.UInt16BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.Int16BitConverter">
            <summary>
            Represents a bit converter that converts 16-bit signed integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.Int16BitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Int16"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.Int16BitConverter.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.Int16BitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.SByteBitConverter">
            <summary>
            Represents a bit converter that converts 8-bit signed integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.SByteBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.SByte"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.SByteBitConverter.GetBytes(System.SByte,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.SByteBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.ByteBitConverter">
            <summary>
            Represents a bit converter that converts 8-bit unsigned integers to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.ByteBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Byte"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.ByteBitConverter.GetBytes(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.ByteBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="T:Noname.BitConversion.System.BooleanBitConverter">
            <summary>
            Represents a bit converter that converts boolean instances to a sequence of bytes and vice versa.
            </summary>
        </member>
        <member name="F:Noname.BitConversion.System.BooleanBitConverter.Instance">
            <summary>
            The converter of instances of the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.System.BooleanBitConverter.GetBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="M:Noname.BitConversion.System.BooleanBitConverter.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
        </member>
        <member name="T:Noname.BitConversion.VariableLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts instances of the type to a sequence of bytes and vice versa. The converter is suitable for types which instances converts to a sequence of variable number of bytes.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetBytes(`0)">
            <summary>
            Converts a specified instance to an array of bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <returns>The array of bytes to contain the converted instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetBytes(`0,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetInstance(System.Byte[])">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetByteCount(`0)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetBytes(`0,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverter`1.GetInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
            <exception cref="T:System.NotSupportedException">The converting type is abstract class.</exception>
        </member>
        <member name="T:Noname.BitConversion.IReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts instances of the type to a sequence of bytes and vice versa. In order to get instance from bytes the bit converter requires only an array of bytes and index.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.IReliableBitConverter`1.GetByteCount(`0)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.IReliableBitConverter`1.GetBytes(`0,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.IReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
            <exception cref="T:System.NotSupportedException">The converting type is abstract class.</exception>
        </member>
        <member name="T:Noname.BitConversion.ReliableBitConverter">
            <summary>
            Provides methods for <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> initializing.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.ReliableBitConverter.GetInstance``1(Noname.BitConversion.VariableLengthBitConverter{``0})">
            <summary>
            Returns a <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/>.
            </summary>
            <param name="underlyingBitConverter">The underlying <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of values.</param>
            <returns>A <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingBitConverter"/> is null.</exception>
        </member>
        <member name="T:Noname.BitConversion.ReliableBitConverter`1">
            <summary>
            Represents a bit converter that converts instances of the type to a sequence of bytes and vice versa. At first <see cref="T:Noname.BitConversion.ReliableBitConverter`1"/> writes the number of converted bytes as 32-bit signed integer and only after that writes the bytes of instance.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.ReliableBitConverter`1.GetByteCount(`0)">
            <summary>
            Calculates the requiring number of bytes for conversion.
            </summary>
            <param name="instance">The instance for which the number of bytes calculates.</param>
            <returns>The requiring number of bytes for conversion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null.</exception>
            <exception cref="T:System.OverflowException">It is not enough 32-bit signed integer to represent the number of bytes for conversion.</exception>
        </member>
        <member name="M:Noname.BitConversion.ReliableBitConverter`1.GetBytes(`0,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ReliableBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
            <exception cref="T:System.NotSupportedException">The converting type is abstract class.</exception>
        </member>
        <member name="T:Noname.BitConversion.ConstantLengthBitConverter`1">
            <summary>
            Represents a bit converter that converts instances of the type to a sequence of bytes and vice versa. The converter is only suitable for types which instances convert to a sequence of the same number of bytes.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="F:Noname.BitConversion.ConstantLengthBitConverter`1.ByteCount">
            <summary>
            The number of bytes that is necessary to convert instances of the type.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> class.
            </summary>
            <param name="byteCount">The number of bytes that is necessary to convert instances of the type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetBytes(`0)">
            <summary>
            Converts a specified instance to an array of bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <returns>The array of bytes to contain the converted instance.</returns>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetBytes(`0,System.Byte[],System.Int32@)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index and increases a specified index by the number of written bytes.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetInstance(System.Byte[])">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetInstance(System.Byte[],System.Int32@)">
            <summary>
            Converts specified bytes to the instance and increases a specified index by the number of converted bytes.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetBytes(`0,System.Byte[],System.Int32)">
            <summary>
            Converts a specified instance to a sequence of bytes to write to a specified array of bytes at a specified index.
            </summary>
            <param name="instance">The instance to convert to a sequence of bytes.</param>
            <param name="bytes">The array into which the bytes are to write.</param>
            <param name="index">The index at which the bytes are to write to the array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.ConstantLengthBitConverter`1.GetInstance(System.Byte[],System.Int32)">
            <summary>
            Converts specified bytes to the instance.
            </summary>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1">
            <summary>
            Represents a modification of <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> that can convert derived types.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.InheritableVariableLengthBitConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.InheritableVariableLengthBitConverter`1.SetInstance(`0,System.Byte[])">
            <summary>
            Sets a specified instance by specified bytes and increases a specified index by the number of converted bytes.
            </summary>
            <param name="instance">The instance to set by specified bytes.</param>
            <param name="bytes">The array of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.InheritableVariableLengthBitConverter`1.SetInstance(`0,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Sets a specified instance by specified bytes and increases a specified index by the number of converted bytes.
            </summary>
            <param name="instance">The instance to set by specified bytes.</param>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="M:Noname.BitConversion.InheritableVariableLengthBitConverter`1.SetInstance(`0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets a specified instance by specified bytes.
            </summary>
            <param name="instance">The instance to set by specified bytes.</param>
            <param name="bytes">The array of bytes to convert.</param>
            <param name="index">The index at which the bytes are to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null or <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred when convert.</exception>
        </member>
        <member name="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`1">
            <summary>
            Represents a builder of an <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2">
            <summary>
            Represents a builder of an <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
            <typeparam name="TBase">The base type of the converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2.AddField``1(System.Func{`0,``0},System.Action{`0,``0},Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Adds a specified field to conversion.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="getter">A function to get a value of the field.</param>
            <param name="setter">A procedure to set a value of the field.</param>
            <param name="bitConverter">A bit converter to convert a value of the field.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> is null or <paramref name="setter"/> is null or <paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2"/> is finalized.</exception>
        </member>
        <member name="M:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2.SetBaseBitConverter(Noname.BitConversion.InheritableVariableLengthBitConverter{`1})">
            <summary>
            Sets the base <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/> for the base type.
            </summary>
            <param name="bitConverter">The base <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/> for the base type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2"/> is finalized.</exception>
        </member>
        <member name="M:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2.Finalize">
            <summary>
            Finalizes the build of the <see cref="T:Noname.BitConversion.AbstractVariableLengthBitConverterBuilder`2"/>.
            </summary>
            <returns>The constructed <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.</returns>
        </member>
        <member name="T:Noname.BitConversion.VariableLengthBitConverterBuilder`1">
            <summary>
            Represents a builder of an <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
        </member>
        <member name="T:Noname.BitConversion.VariableLengthBitConverterBuilder`2">
            <summary>
            Represents a builder of an <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.
            </summary>
            <typeparam name="T">The converting type.</typeparam>
            <typeparam name="TBase">The base type of the converting type.</typeparam>
        </member>
        <member name="M:Noname.BitConversion.VariableLengthBitConverterBuilder`2.Finalize">
            <summary>
            Finalizes the build of the <see cref="T:Noname.BitConversion.VariableLengthBitConverterBuilder`2"/>.
            </summary>
            <returns>The constructed <see cref="T:Noname.BitConversion.InheritableVariableLengthBitConverter`1"/>.</returns>
        </member>
        <member name="T:Noname.Collections.Generic.RedBlackTreeCollection`2">
            <summary>
            Represents a collection of key/value pairs which are sorted using "red black tree" by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> can contain.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeCollection`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeCollection`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeCollection`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.</param>
            <returns>true if the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The value to set.</param>
            <returns>true if the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.TryGetFirstOnRay(System.Boolean,`0,`0@,`1@)">
            <summary>
            Gets the key and value of an element that is first on a specified ray if such an element exist; otherwise the defaults.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <param name="key">The key to set.</param>
            <param name="value">The value to set.</param>
            <returns>true if the ray contains the element; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetKeysFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetValuesFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetKeysFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetValuesFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.GetValuesOfKey(`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values of a specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values of a specified key.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeCollection`2.Remove(`0,`1)">
            <summary>
            Removes the element with the specified key and value from the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if the pair of <paramref name="key"/> and <paramref name="value"/> was not found in the <see cref="T:Noname.Collections.Generic.RedBlackTreeCollection`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Noname.Collections.Generic.RedBlackTreeDictionary`2">
            <summary>
            Represents a dictionary of key/value pairs which are sorted using "red black tree" by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The value with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not found.</exception>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Noname.Collections.Generic.RedBlackTreeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</param>
            <returns>true if the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The value to set.</param>
            <returns>true if the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.TryGetFirstOnRay(System.Boolean,`0,`0@,`1@)">
            <summary>
            Gets the key and value of an element that is first on a specified ray if such an element exist; otherwise the defaults.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <param name="key">The key to set.</param>
            <param name="value">The value to set.</param>
            <returns>true if the ray contains the element; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetKeysFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetValuesFromRay(System.Boolean,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified ray.
            </summary>
            <param name="left">If true the ray is directed to the left; otherwise, to the right.</param>
            <param name="start">The start of the ray.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified ray.</returns>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of key/value pairs which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetKeysFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of keys which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.GetValuesFromInterval(`0,`0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified interval.
            </summary>
            <param name="left">The left bound of the interval.</param>
            <param name="right">The right bound of the interval.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of values which are on a specified interval.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> is greater than <paramref name="right"/>.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Noname.Collections.Generic.RedBlackTreeDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">When this method returns, the value will be associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key"/> was not found in the <see cref="T:Noname.Collections.Generic.RedBlackTreeDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Noname.Collections.ObjectModel.ReversibleObservableCollection`1">
            <summary>
            Represents an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> modification that can be undone or redone.
            </summary>
        </member>
        <member name="M:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.ObjectModel.ReversibleObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Collections.ObjectModel.ReversibleObservableCollection`1"/> class.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="P:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.CanUndoProperty">
            <summary>
            Provides access to the value indicating whether the collection can be undone.
            </summary>
        </member>
        <member name="P:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.CanRedoProperty">
            <summary>
            Provides access to the value indicating whether the collection can be redone.
            </summary>
        </member>
        <member name="E:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.ChangeRemembered">
            <summary>
            Occurs when a change was remembered.
            </summary>
        </member>
        <member name="M:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.Undo">
            <summary>
            Undoes the state of this collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object cannot be undone.</exception>
        </member>
        <member name="M:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.Redo">
            <summary>
            Redoes the state of this collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object cannot be redone.</exception>
        </member>
        <member name="M:Noname.Collections.ObjectModel.ReversibleObservableCollection`1.ForgetChanges">
            <summary>
            Removes the remembered changes.
            </summary>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3">
            <summary>
            Represents a manager of an element of a dictionary in a domain. The element references to objects and has the data.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.op_Equality(Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2},Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> instances are of the same element.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> is the same as the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.op_Inequality(Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2},Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> instances are of different elements.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> differs from the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.VariableLengthData">
            <summary>
            Gets or sets the variable length data.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.ConstantLengthData">
            <summary>
            Gets or sets the constant length data.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> to get or set.</param>
            <returns>The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.</returns>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of the pointers of the element.</exception>
            <exception cref="T:System.ArgumentNullException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.Key">
            <summary>
            Gets the key of the element in the dictionary.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.HasItem">
            <summary>
            Gets the value meaning whether the element contains an item.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.Dictionary">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> of the dictionary of the element.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.SetDefault">
            <summary>
            Makes the item the default item.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> are of the same element.
            </summary>
            <param name="obj">The <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to compare with the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/>.</param>
            <returns>true if the specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> are of the same element; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3.GetHashCode">
            <summary>
            Serves as the hash function.
            </summary>
            <returns>A hash code of the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/>.</returns>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager">
            <summary>
            Provides method of dictionary managers initializing.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Open``3(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the constant length data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Open``3(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="comparer">The <see cref= "T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Open``3(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Open``3(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="comparer">The <see cref= "T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to manage the existing dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="capacity">The number of elements the dictionary can contain.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="capacity"/> is less than 1.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="comparer">The <see cref= "T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <param name="capacity">The number of elements the dictionary can contain.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="capacity"/> is less than 1.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="capacity">The number of elements the dictionary can contain.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="capacity"/> is less than 1.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager.Create``3(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.VariableLengthBitConverter{``0},Noname.BitConversion.ConstantLengthBitConverter{``1},Noname.BitConversion.VariableLengthBitConverter{``2},System.Int32,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the dictionary.</param>
            <param name="keyBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the keys in the dictionary.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="comparer">The <see cref= "T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <param name="capacity">The number of elements the dictionary can contain.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3"/> class to create and manage the dictionary in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="keyBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="capacity"/> is less than 1.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3">
            <summary>
            Represents a manager of a collection of key/value pairs that is in a domain.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Item(`0)">
            <summary>
            Gets a <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> of an item with the specified key.
            </summary>
            <param name="key">The key of the item to get.</param>
            <returns>A <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> of an item with the specified key.</returns>
            <exception cref="T:System.ArgumentException">The dictionary does not contain an item with the specified key.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.PointerCount">
            <summary>
            Gets the number of pointers of elements.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Pointer">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the pointer that points to the dictionary.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.SetDefault">
            <summary>
            Makes the dictionary the default dictionary.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Clear">
            <summary>
            Removes all items from the dictionary.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns><see cref = "T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an item with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.TryGetValue(`0,Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2}@)">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> of the element associated with the specified key.
            </summary>
            <param name="key">The key whose <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> to get.</param>
            <param name="dictionaryElementManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> of the element associated with the specified key.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.CopyTo(Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager{`0,`1,`2}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the dictionary. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is not a valid index of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the dictionary is greater than the available space from the <paramref name="arrayIndex"/> to the end of the array.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Remove(`0)">
            <summary>
            Removes the item with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>true if item was found and removed from the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.DictionaryManager`3.Add(`0)">
            <summary>
            Adds an item into the dictionary.
            </summary>
            <param name="key">The key of the item to add.</param>
            <returns>A <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.DictionaryElementManager`3"/> of the element of the added item.</returns>
            <exception cref="T:System.ArgumentException">The dictionary already contains an item with the specified key.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2">
            <summary>
            Represents a manager of an element of a collection in a domain. The element references to objects and has the data.
            </summary>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.op_Equality(Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager{`0,`1},Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> instances are of the same element.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> is the same as the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.op_Inequality(Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager{`0,`1},Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> instances are of different elements.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> differs from the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> to get or set.</param>
            <returns>The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.</returns>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of the pointers of the element.</exception>
            <exception cref="T:System.ArgumentNullException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.VariableLengthData">
            <summary>
            Gets or sets the variable length data of the element.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.ConstantLengthData">
            <summary>
            Gets or sets the constant length data of the element.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.HasItem">
            <summary>
            Gets the value meaning whether the element contains an item.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.Key">
            <summary>
            Gets the key of the element in the collection.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.Collection">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> of the collection of the element.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.SetDefault">
            <summary>
            Makes the item as the default item.
            </summary>
            <exception cref="T:System.InvalidOperationException">The element does not contain an item.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> are of the same element.
            </summary>
            <param name="obj">The <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> to compare with the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/>.</param>
            <returns>true if the specified <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> are of the same element; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2.GetHashCode">
            <summary>
            Serves as the hash function.
            </summary>
            <returns>A hash code of the current <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/>.</returns>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager">
            <summary>
            Provides methods for collection manager manipulations.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager.Open``2(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to manage the existing collection in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the collection.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the constant length data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to manage the existing collection in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager.Create``2(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to create and manage the collection in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the collection.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to create and manage the collection in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 1.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager.Create``2(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to create and manage the collection in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the collection.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="capacity">The number of elements the collection can contain.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2"/> class to create and manage the collection in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="capacity"/> is less than 1.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2">
            <summary>
            Represents a manager of a collection of elements that is in a domain.
            </summary>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> of an item with the specified key.
            </summary>
            <param name="key">The key of the item to get.</param>
            <returns>A <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> of an item with the specified key.</returns>
            <exception cref="T:System.ArgumentException">The collection does not contain an item with the specified key.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.PointerCount">
            <summary>
            Gets the number of pointers of elements.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Pointer">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the pointer that points to the collection.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.SetDefault">
            <summary>
            Makes the collection the default collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.CopyTo(Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is not a valid index of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the collection is greater than the available space from the <paramref name="arrayIndex"/> to the end of the array.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Remove(System.Int32)">
            <summary>
            Removes an item with the specified key.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>true if the item was found and removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.Collections.CollectionManager`2.Add">
            <summary>
            Adds an item into the collection.
            </summary>
            <returns>A <see cref="T:Noname.IO.ObjectOrientedDomain.Collections.CollectionElementManager`2"/> of the element of the added item.</returns>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.ObjectManager">
            <summary>
            Provides methods for object manager manipulations.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ObjectManager.Open``2(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ObjectManager`2"/> class to manage the existing object in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the object.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the constant length data of the object.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of the object.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ObjectManager`2"/> class to manage the existing object in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ObjectManager.Create``2(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ObjectManager`2"/> class to create and manage the object in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the object.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the constant length data of the object.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of the object.</param>
            <param name="pointerCount">The number of pointers of the object.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ObjectManager`2"/> class to create and manage the object in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="constantLengthDataBitConverter"/> is null or <paramref name="constantLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.ObjectManager`2">
            <summary>
            Represents a manager of an object that is in a domain.
            </summary>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ObjectManager`2.VariableLengthData">
            <summary>
            Gets or sets the variable length data of the object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ObjectManager`2.ConstantLengthData">
            <summary>
            Gets or sets the constant length data of the object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ObjectManager`2.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> to get or set.</param>
            <returns>The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of the pointers of the object.</exception>
            <exception cref="T:System.ArgumentNullException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ObjectManager`2.Pointer">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the pointer that points to the object.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ObjectManager`2.SetDefault">
            <summary>
            Makes the object the default object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.IObjectManager">
            <summary>
            Represents a manager of an object that is a domain.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.IObjectManager.SetDefault">
            <summary>
            Makes the object the default object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.PointerCycleException">
            <summary>
            The exception that is thrown when there is a cycle of pointers appear.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.PointerCycleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerCycleException"/> class.
            </summary>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.DomainManager">
            <summary>
            Represents a manager of an object oriented domain.
            </summary>
        </member>
        <member name="F:Noname.IO.ObjectOrientedDomain.DomainManager.DefaultDescriptorCountGarbageCollectBound">
            <summary>
            The default bound of number of descriptors for the auto garbage collecting.
            </summary>
        </member>
        <member name="F:Noname.IO.ObjectOrientedDomain.DomainManager.DefaultFreeSegmentCountDefragmentBound">
            <summary>
            The default bound of number of free segments of the heap for the auto defragmenting.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> class with default values.
            </summary>
            <param name="path">The path to the domain.</param>
            <param name="create">If true the domain creates; otherwise, the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> opens the domain.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> class.
            </summary>
            <param name="path">The path to the domain.</param>
            <param name="create">If true the domain creates; otherwise, the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> opens the domain.</param>
            <param name="maxReadByteCount">The max number of bytes to read.</param>
            <param name="maxChangeBufferSize">The max size of the change buffer.</param>
            <param name="maxCachePieceByteCount">The max number of bytes in a piece of the cache.</param>
            <param name="cachePieceCountFlushBound">The bound of number of pieces of the cache for the auto cache flush.</param>
            <param name="cacheByteCountFlushBound">The bound of number of bytes of the cache for the auto cache flush.</param>
            <param name="descriptorCountGarbageCollectBound">The bound of number of descriptors for the auto garbage collecting.</param>
            <param name="freeSegmentCountDefragmentBound">The bound of number of free segments of the heap for the auto defragmenting.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxCachePieceByteCount"/> is less than 1 or <paramref name="maxReadByteCount"/> is less than 2 or <paramref name="maxChangeBufferSize"/> is less than 12 or <paramref name="cachePieceCountFlushBound"/> is less than 1 or <paramref name="cacheByteCountFlushBound"/> is less than 1 or <paramref name="descriptorCountGarbageCollectBound"/> is less than 1 or <paramref name="freeSegmentCountDefragmentBound"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.StartPointer">
            <summary>
            Gets or sets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the start pointer.
            </summary>
            <exception cref="T:System.ArgumentNullException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.NullPointer">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the pointer that does not point to an object.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.SystemOccupiedAmount">
            <summary>
            Gets the amount of occupied space by the system.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.NonCommitted">
            <summary>
            Gets the value meaning whether the non-committed changes exist.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.PointerDescriptorCount">
            <summary>
            Gets a number of the pointer descriptors that are used.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.PointerListCapacity">
            <summary>
            Gets the capacity of the pointer list.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.PointerListUsedCount">
            <summary>
            Gets the number of the used elements of pointer list.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.PointerListAddress">
            <summary>
            Gets the address of the pointer list.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.StartPointerIndex">
            <summary>
            Gets the start pointer index.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapSystemOccupiedAmount">
            <summary>
            Gets the amount of occupied space by the system of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapFreeSegmentCount">
            <summary>
            Gets the number of free segments in the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapFreeSegmentListCapacity">
            <summary>
            Gets the capacity of the free segment list of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapFreeSegmentListUsedCount">
            <summary>
            Gets the number of the used elements in the free segment list of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapFreeSegmentListAddress">
            <summary>
            Gets the address of the free segment list of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapTotalSize">
            <summary>
            Gets the total size of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapFreeAmount">
            <summary>
            Gets the amount of free space of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapOccupiedAmount">
            <summary>
            Gets the amount of occupied space of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.HeapNonCommitted">
            <summary>
            Gets the value meaning whether the non-committed changes exist in the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.Disposed">
            <summary>
            Gets the value meaning whether the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.CachePieceCount">
            <summary>
            Gets the number of pieces of the cache of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.CacheByteCount">
            <summary>
            Gets the number of bytes of the cache of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.CacheExtremeOffset">
            <summary>
            Gets the extreme address of the cache of the heap.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.DomainManager.CacheOccupiedByteCount">
            <summary>
            Gets the number of occupied bytes of the cache of the heap.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.Backup(System.String)">
            <summary>
            Makes backup of the domain.
            </summary>
            <param name="directory">The directory for the backup file.</param>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.Commit">
            <summary>
            Commits the made changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.FlushCache">
            <summary>
            Writes the cache to the data file and clears the cache.
            </summary>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainManager.Defragment">
            <summary>
            Defragments the domain.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.ArrayManager">
            <summary>
            Provides methods for array manager manipulations.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager.Copy``2(Noname.IO.ObjectOrientedDomain.ArrayManager{``0,``1},Noname.IO.ObjectOrientedDomain.ArrayManager{``0,``1},System.Int32)">
            <summary>
            Copies a range of elements from an array starting at the first element and pastes them into another array starting at the first element.
            </summary>
            <param name="sourceArrayManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> of the array that contains the data to copy.</param>
            <param name="destinationArrayManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> of the array that receives the data.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceArrayManager"/> is null or <paramref name="destinationArrayManager"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">Arrays of <paramref name="destinationArrayManager"/> and <paramref name="sourceArrayManager"/> are not of the same domain or arrays of <paramref name="destinationArrayManager"/> and <paramref name="sourceArrayManager"/> have different element types or <paramref name="length"/> is greater than the number of elements in an array of <paramref name="sourceArrayManager"/> or <paramref name="length"/> is greater than the number of elements in an array of <paramref name="destinationArrayManager"/>.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager.Copy``2(Noname.IO.ObjectOrientedDomain.ArrayManager{``0,``1},System.Int32,Noname.IO.ObjectOrientedDomain.ArrayManager{``0,``1},System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an array starting at the specified source index and pastes them to another array starting at the specified destination index.
            </summary>
            <param name="sourceArrayManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> of the array that contains the data to copy.</param>
            <param name="sourceIndex">The index in the <paramref name="sourceArrayManager"/> at which copying begins.</param>
            <param name="destinationArrayManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> of the array that receives the data.</param>
            <param name="destinationIndex">The index in the <paramref name="destinationArrayManager"/> at which storing begins.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceArrayManager"/> is null or <paramref name="destinationArrayManager"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is outside the range of valid indices of an array of <paramref name="sourceArrayManager"/> or <paramref name="destinationIndex"/> is outside the range of valid indices of an array of <paramref name="destinationArrayManager"/> or <paramref name="length"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">Arrays of <paramref name="destinationArrayManager"/> and <paramref name="sourceArrayManager"/> are not of the same domain or arrays of <paramref name="destinationArrayManager"/> and <paramref name="sourceArrayManager"/> have different element types or <paramref name="length"/> is greater than the number of elements from <paramref name="sourceIndex"/> to the end of an array of <paramref name="sourceArrayManager"/> or <paramref name="length"/> is greater than the number of elements from <paramref name="destinationIndex"/> to the end of an array of <paramref name="destinationArrayManager"/>.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager.Open``2(Noname.IO.ObjectOrientedDomain.PointerManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> class to manage the existing array in the domain.
            </summary>
            <param name="pointerManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> that points to the array.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the constant length data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> class to manage the existing array in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pointerManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null. or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"><paramref name="pointerManager"/> does not point to an object.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager.Create``2(Noname.IO.ObjectOrientedDomain.DomainManager,Noname.BitConversion.ConstantLengthBitConverter{``0},Noname.BitConversion.VariableLengthBitConverter{``1},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> class to create and manage the array in the domain.
            </summary>
            <param name="domainManager">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the domain of the array.</param>
            <param name="constantLengthDataBitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> of the type of the constant length data of elements.</param>
            <param name="variableLengthDataBitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> of the type of the variable length data of elements.</param>
            <param name="pointerCount">The number of pointers of an element.</param>
            <param name="length">The length of the array.</param>
            <returns>A new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> class to create and manage the array in the domain.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainManager"/> is null or <paramref name="constantLengthDataBitConverter"/> is null. or <paramref name="variableLengthDataBitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerCount"/> is less than 0 or <paramref name="length"/> is less than 1.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2">
            <summary>
            Represents a manager of an array that is in a domain.
            </summary>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayManager`2.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> of an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to get.</param>
            <returns>The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the array.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayManager`2.Length">
            <summary>
            Gets the length of the array.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayManager`2.PointerCount">
            <summary>
            Gets the number of pointers of elements.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayManager`2.Pointer">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of the pointer that points to the array.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager`2.CopyTo(Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1}[],System.Int32)">
            <summary>
            Copies managers of the elements of the array to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is not a valid index of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source array is greater than the available space from the <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager`2.CopyTo(Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1}[],System.Int32,System.Int32)">
            <summary>
            Copies managers of the elements of the array to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is not a valid index of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements from <paramref name="arrayIndex"/> to the end of the destination array or <paramref name="length"/> is greater than the number of elements in the source array.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the array.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the array.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayManager`2.SetDefault">
            <summary>
            Makes the array the default array.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2">
            <summary>
            Represents a manager of an element of an array that is in a domain.
            </summary>
            <typeparam name="TConstantLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/>.</typeparam>
            <typeparam name="TVariableLengthData">The type of the data that converts by <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/>.</typeparam>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.op_Equality(Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1},Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> instances are of the same element.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> is the same as the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.op_Inequality(Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1},Noname.IO.ObjectOrientedDomain.ArrayElementManager{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> instances are of different elements.
            </summary>
            <param name="a">The first <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to compare.</param>
            <param name="b">The second <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to compare.</param>
            <returns>true if the element of <paramref name="a"/> differs from the element of <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.
            </summary>
            <param name="pointerIndex">The zero-based index of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> to get or set.</param>
            <returns>The <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> at a specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pointerIndex"/> is not a valid index of the pointers of the element.</exception>
            <exception cref="T:System.ArgumentNullException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is null.</exception>
            <exception cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">A specified <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> is of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.VariableLengthData">
            <summary>
            Gets or sets the variable length data of the element.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.ConstantLengthData">
            <summary>
            Gets or sets the constant length data of the element.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.Index">
            <summary>
            Gets the index of the element in the array.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.Array">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayManager`2"/> of the <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/>.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.SetDefault">
            <summary>
            Makes the element the default element.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> are of the same element.
            </summary>
            <param name="obj">The <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> to compare with the current <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/>.</param>
            <returns>true if the specified <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> and the current <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/> are of the same element; otherwise, false.</returns>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2.GetHashCode">
            <summary>
            Serves as the hash function.
            </summary>
            <returns>A hash code for the element of the current <see cref="T:Noname.IO.ObjectOrientedDomain.ArrayElementManager`2"/>.</returns>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException">
            <summary>
            The exception that is thrown when there is an attempt to access a <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/> of another <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/>.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.DomainMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainMismatchException"/> class.
            </summary>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.PointerNullException">
            <summary>
            The exception that is thrown when there is an attempt to dereference a pointer that does not point to an object.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.PointerNullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerNullException"/> class.
            </summary>
        </member>
        <member name="T:Noname.IO.ObjectOrientedDomain.PointerManager">
            <summary>
            Represents a manager of a pointer that points to an object in a domain.
            </summary>
        </member>
        <member name="M:Noname.IO.ObjectOrientedDomain.PointerManager.Finalize">
            <summary>
            Releases all resources used by the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/>.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.PointerManager.IsNull">
            <summary>
            Gets the value meaning whether the pointer does not point to an object.
            </summary>
        </member>
        <member name="P:Noname.IO.ObjectOrientedDomain.PointerManager.Domain">
            <summary>
            Gets the <see cref="T:Noname.IO.ObjectOrientedDomain.DomainManager"/> of the <see cref="T:Noname.IO.ObjectOrientedDomain.PointerManager"/>.
            </summary>
        </member>
        <member name="T:Noname.IO.HeapDefragmentResult">
            <summary>
            Provides data about a heap defragmentation shifts.
            </summary>
        </member>
        <member name="M:Noname.IO.HeapDefragmentResult.ShiftOf(System.Int64)">
            <summary>
            Returns the shift to the left for a specified address.
            </summary>
            <param name="address">The address for which the shift is to return.</param>
            <returns>The shift to the left for a specified address.</returns>
        </member>
        <member name="T:Noname.IO.HeapManager">
            <summary>
            Represents a manager of a managed heap of data that realized in a file.
            </summary>
        </member>
        <member name="M:Noname.IO.HeapManager.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.HeapManager"/> class with default values.
            </summary>
            <param name="path">The path to the heap.</param>
            <param name="create">If true the heap creates; otherwise, the <see cref="T:Noname.IO.HeapManager"/> opens the heap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Noname.IO.HeapManager.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.HeapManager"/> class.
            </summary>
            <param name="path">The path to the heap.</param>
            <param name="create">If true the heap creates; otherwise, the <see cref="T:Noname.IO.HeapManager"/> opens the heap.</param>
            <param name="maxReadByteCount">The max number of bytes to read.</param>
            <param name="maxChangeBufferSize">The max size of the change buffer.</param>
            <param name="maxCachePieceByteCount">The max number of bytes in a piece of the cache.</param>
            <param name="cachePieceCountFlushBound">The bound of number of pieces of the cache for the auto cache flush.</param>
            <param name="cacheByteCountFlushBound">The bound of number of bytes of the cache for the auto cache flush.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxCachePieceByteCount"/> is less than 1 or <paramref name="maxReadByteCount"/> is less than 2 or <paramref name="maxChangeBufferSize"/> is less than 12 or <paramref name="cachePieceCountFlushBound"/> is less than 1 or <paramref name="cacheByteCountFlushBound"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="P:Noname.IO.HeapManager.StartAddress">
            <summary>
            Gets the address that starts the work.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.SystemOccupiedAmount">
            <summary>
            Gets the amount of occupied space by the system.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.FreeSegmentCount">
            <summary>
            Gets the number of free segments.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.FreeSegmentListCapacity">
            <summary>
            Gets the capacity of the free segment list.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.FreeSegmentListUsedCount">
            <summary>
            Gets the number of the used elements in the free segment list.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.FreeSegmentListAddress">
            <summary>
            Gets the address of the free segment list.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.TotalSize">
            <summary>
            Gets the total size.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.FreeAmount">
            <summary>
            Gets the amount of free space.
            </summary>
        </member>
        <member name="P:Noname.IO.HeapManager.OccupiedAmount">
            <summary>
            Gets the amount of occupied space.
            </summary>
        </member>
        <member name="M:Noname.IO.HeapManager.Defragment">
            <summary>
            Defragments the heap.
            </summary>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.HeapManager"/> is disposed.</exception>
            <returns>A <see cref="T:Noname.IO.HeapDefragmentResult"/> that contains data about the defragmentation shifts.</returns>
        </member>
        <member name="M:Noname.IO.HeapManager.Allocate(System.Int64)">
            <summary>
            Allocates a segment in the heap.
            </summary>
            <param name="size">The size of the segment.</param>
            <returns>The address of the allocated segment.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is not greater than zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.HeapManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.HeapManager.Free(System.Int64,System.Int64)">
            <summary>
            Frees a segment in the heap.
            </summary>
            <param name="address">The address of the segment.</param>
            <param name="size">The size of the segment.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0 or <paramref name="size"/> is not greater than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="size"/> is greater than the number of bytes from <paramref name="address"/> to the end of the heap or the specified segment does not exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.HeapManager"/> is disposed.</exception>
        </member>
        <member name="T:Noname.IO.StorageManager">
            <summary>
            Represents a manager of a storage that is realized in a file. The storage supports cache, backup and commit to update the data safely.
            </summary>
        </member>
        <member name="F:Noname.IO.StorageManager.DefaultMaxReadByteCount">
            <summary>
            The default max number of bytes to read.
            </summary>
        </member>
        <member name="F:Noname.IO.StorageManager.DefaultMaxChangeBufferSize">
            <summary>
            The default max size of the change buffer.
            </summary>
        </member>
        <member name="F:Noname.IO.StorageManager.DefaultMaxCachePieceByteCount">
            <summary>
            The default max number of bytes in a piece of the cache.
            </summary>
        </member>
        <member name="F:Noname.IO.StorageManager.DefaultCachePieceCountFlushBound">
            <summary>
            The default bound of number of pieces of the cache for the auto cache flush.
            </summary>
        </member>
        <member name="F:Noname.IO.StorageManager.DefaultCacheByteCountFlushBound">
            <summary>
            The default bound of number of bytes of the cache for the auto cache flush.
            </summary>
        </member>
        <member name="M:Noname.IO.StorageManager.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.StorageManager"/> class.
            </summary>
            <param name="path">The path to the storage.</param>
            <param name="create">If true the storage creates; otherwise, the <see cref="T:Noname.IO.StorageManager"/> opens the storage.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.IO.StorageManager"/> class.
            </summary>
            <param name="path">The path to the storage.</param>
            <param name="create">If true the storage creates; otherwise, the <see cref="T:Noname.IO.StorageManager"/> opens the storage.</param>
            <param name="maxReadByteCount">The max number of bytes to read.</param>
            <param name="maxChangeBufferSize">The max size of the change buffer.</param>
            <param name="maxCachePieceByteCount">The max number of bytes in a piece of the cache.</param>
            <param name="cachePieceCountFlushBound">The bound of number of pieces of the cache for the auto cache flush.</param>
            <param name="cacheByteCountFlushBound">The bound of number of bytes of the cache for the auto cache flush.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxCachePieceByteCount"/> is less than 1 or <paramref name="maxReadByteCount"/> is less than 2 or <paramref name="maxChangeBufferSize"/> is less than 12 or <paramref name="cachePieceCountFlushBound"/> is less than 1 or <paramref name="cacheByteCountFlushBound"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="P:Noname.IO.StorageManager.NonCommitted">
            <summary>
            Gets the value meaning whether the non-committed changes exist.
            </summary>
        </member>
        <member name="P:Noname.IO.StorageManager.Disposed">
            <summary>
            Gets the value meaning whether the <see cref="T:Noname.IO.StorageManager"/> is disposed.
            </summary>
        </member>
        <member name="P:Noname.IO.StorageManager.CachePieceCount">
            <summary>
            Gets the number of pieces of the cache.
            </summary>
        </member>
        <member name="P:Noname.IO.StorageManager.CacheByteCount">
            <summary>
            Gets the number of bytes of the cache.
            </summary>
        </member>
        <member name="P:Noname.IO.StorageManager.CacheExtremeOffset">
            <summary>
            Gets the extreme address of the cache.
            </summary>
        </member>
        <member name="P:Noname.IO.StorageManager.CacheOccupiedByteCount">
            <summary>
            Gets the number of occupied bytes of the cache.
            </summary>
        </member>
        <member name="M:Noname.IO.StorageManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Noname.IO.StorageManager"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Commit">
            <summary>
            Commits the made changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Backup(System.String)">
            <summary>
            Makes backup of the storage.
            </summary>
            <param name="directory">The directory for the backup file.</param>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.FlushCache">
            <summary>
            Writes the cache to the data file and clears the cache.
            </summary>
            <exception cref="T:System.InvalidOperationException">The non-committed changes exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Copy(System.Int64,System.Int64,System.Int64)">
            <summary>
            Reads bytes at <paramref name="sourceAddress"/> and writes it at <paramref name="destinationAddress"/>.
            </summary>
            <param name="sourceAddress">The source address of the bytes.</param>
            <param name="destinationAddress">The destination address of the bytes.</param>
            <param name="count">The number of the bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceAddress"/> is less than 0 or <paramref name="destinationAddress"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Read``1(System.Int64,Noname.BitConversion.ConstantLengthBitConverter{``0})">
            <summary>
            Reads bytes from the storage and converts it to a value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="address">The address of the bytes.</param>
            <param name="bitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> to convert read bytes to the value.</param>
            <returns>A read value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Read``1(System.Int64,System.Int32,Noname.BitConversion.VariableLengthBitConverter{``0})">
            <summary>
            Reads bytes from the storage and converts it to a value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="address">The address of the bytes.</param>
            <param name="count">The number of the bytes.</param>
            <param name="bitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> to convert read bytes to the value.</param>
            <returns>A read value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Read(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads bytes from the storage.
            </summary>
            <param name="address">The address of the bytes.</param>
            <param name="count">The number of the bytes.</param>
            <param name="buffer">The buffer to receive the bytes.</param>
            <param name="index">The index at which the reading to the buffer begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0 or <paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/> or <paramref name="count"/> is greater than the number of bytes from the <paramref name="address"/> to the end of the storage.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Write``1(``0,Noname.BitConversion.ConstantLengthBitConverter{``0},System.Int64)">
            <summary>
            Converts the specified value to bytes and writes the bytes to the storage.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="bitConverter">The <see cref="T:Noname.BitConversion.ConstantLengthBitConverter`1"/> to convert the value to the bytes.</param>
            <param name="address">The address of the bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Write``1(``0,Noname.BitConversion.VariableLengthBitConverter{``0},System.Int64)">
            <summary>
            Converts the specified value to bytes and writes the bytes to the storage.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="bitConverter">The <see cref="T:Noname.BitConversion.VariableLengthBitConverter`1"/> to convert the value to the bytes.</param>
            <param name="address">The address of the bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitConverter"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="M:Noname.IO.StorageManager.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Writes bytes to the storage.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The index at which the writing from the buffer begins.</param>
            <param name="count">The number of the bytes.</param>
            <param name="address">The address of the bytes in the storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="address"/> is less than 0 or <paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/> or <paramref name="count"/> is greater than the number of bytes from the <paramref name="address"/> to the end of the storage.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Noname.IO.StorageManager"/> is disposed.</exception>
        </member>
        <member name="T:Noname.Data.Cache">
            <summary>
            Represents a cache of bytes. The cache contains bytes in pieces which have the own address (position).
            </summary>
        </member>
        <member name="T:Noname.Data.Cache.Piece">
            <summary>
            Represents a piece of bytes.
            </summary>
        </member>
        <member name="F:Noname.Data.Cache.Piece.Address">
            <summary>
            The address of the bytes.
            </summary>
        </member>
        <member name="F:Noname.Data.Cache.Piece.Count">
            <summary>
            The number of the bytes.
            </summary>
        </member>
        <member name="F:Noname.Data.Cache.Piece.Buffer">
            <summary>
            The buffer of the bytes.
            </summary>
        </member>
        <member name="M:Noname.Data.Cache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Data.Cache"/> class.
            </summary>
            <param name="maxPieceByteCount">The max number of bytes in a piece of the <see cref="T:Noname.Data.Cache"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxPieceByteCount"/> is less than 1.</exception>
        </member>
        <member name="P:Noname.Data.Cache.PieceCount">
            <summary>
            Gets the number of pieces.
            </summary>
        </member>
        <member name="P:Noname.Data.Cache.ByteCount">
            <summary>
            Gets the number of bytes.
            </summary>
        </member>
        <member name="P:Noname.Data.Cache.ExtremeOffset">
            <summary>
            Gets the extreme address.
            </summary>
        </member>
        <member name="P:Noname.Data.Cache.OccupiedByteCount">
            <summary>
            Gets the number of occupied bytes.
            </summary>
        </member>
        <member name="M:Noname.Data.Cache.Clear">
            <summary>
            Clears the <see cref="T:Noname.Data.Cache"/>.
            </summary>
        </member>
        <member name="M:Noname.Data.Cache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Noname.Data.Cache"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Noname.Data.Cache"/>.</returns>
        </member>
        <member name="M:Noname.Data.Cache.Full(System.Int64,System.Int64)">
            <summary>
            Returns true if the <see cref="T:Noname.Data.Cache"/> has all bytes on a specified closed interval; otherwise, false.
            </summary>
            <param name="leftAddress">The left address of the interval.</param>
            <param name="rightAddress">The right address of the interval.</param>
            <returns>true if the <see cref="T:Noname.Data.Cache"/> has all bytes on a specified interval; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="leftAddress"/> is greater than <paramref name="rightAddress"/>.</exception>
        </member>
        <member name="M:Noname.Data.Cache.Fill(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Fills a specified buffer with bytes from the <see cref="T:Noname.Data.Cache"/>.
            </summary>
            <param name="address">The address of the bytes.</param>
            <param name="count">The number of the bytes.</param>
            <param name="buffer">The buffer to receive the bytes.</param>
            <param name="index">The index at which the filling of the buffer begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/> or <paramref name="count"/> is greater than the number of bytes from the <paramref name="address"/> to the end of the <see cref="T:Noname.Data.Cache"/>.</exception>
        </member>
        <member name="M:Noname.Data.Cache.Update(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Updates the bytes in the <see cref="T:Noname.Data.Cache"/>.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The index at which the updating from the buffer begins.</param>
            <param name="count">The number of the bytes.</param>
            <param name="address">The address of the bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/> or <paramref name="count"/> is greater than the number of bytes from the <paramref name="address"/> to the end of the <see cref="T:Noname.Data.Cache"/>.</exception>
        </member>
        <member name="T:Noname.ComponentModel.ChooseModel`1">
            <summary>
            Represents a model to choose some property value by an associated text.
            </summary>
            <typeparam name="T">The type of the property value that must be set.</typeparam>
        </member>
        <member name="M:Noname.ComponentModel.ChooseModel`1.#ctor(Noname.ComponentModel.NotifyingProperty{`0},System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ChooseModel`1"/> class.
            </summary>
            <param name="property">A property which value must be set.</param>
            <param name="values">A collection of available values.</param>
            <param name="getAssociatedText">A method that returns an associated text of a specified value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getAssociatedText"/> is null.</exception>
        </member>
        <member name="P:Noname.ComponentModel.ChooseModel`1.Property">
            <summary>
            Gets the property which value must be set.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ChooseModel`1.FilteredValuesProperty">
            <summary>
            Gets the collection of filtered values.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ChooseModel`1.FilterTextProperty">
            <summary>
            Gets the property containing the filter text.
            </summary>
        </member>
        <member name="T:Noname.ComponentModel.ModelBase">
            <summary>
            Represents a model that consists of the <see cref="T:Noname.ComponentModel.NotifyingObject"/> instances.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ModelBase"/> class.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ModelBase.CanUndoProperty">
            <summary>
            Provides access to the value indicating whether the model can be undone.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ModelBase.CanRedoProperty">
            <summary>
            Provides access to the value indicating whether the model can be redone.
            </summary>
        </member>
        <member name="E:Noname.ComponentModel.ModelBase.ChangeRemembered">
            <summary>
            Occurs when a change was remembered.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ModelBase.Add(Noname.ComponentModel.NotifyingObject)">
            <summary>
            Adds a specified object to the model.
            </summary>
            <param name="notifyingObject">An adding object.</param>
            <exception cref="T:System.ArgumentException">The model already contains a specified object.</exception>
        </member>
        <member name="M:Noname.ComponentModel.ModelBase.Undo">
            <summary>
            Undoes the model state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The property cannot be undone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.ModelBase.Redo">
            <summary>
            Redoes the model state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The property cannot be redone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.ModelBase.ForgetChanges">
            <summary>
            Removes the remembered changes.
            </summary>
        </member>
        <member name="T:Noname.ComponentModel.ValueChangedEventArgs`1">
            <summary>
            Provides data for events occurring when a value changes.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ValueChangedEventArgs`1"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Noname.ComponentModel.ValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Noname.ComponentModel.IReversible">
            <summary>
            Defines a type that can be undone and redone.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.IReversible.CanUndoProperty">
            <summary>
            Provides access to the value indicating whether the object can be undone.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.IReversible.CanRedoProperty">
            <summary>
            Provides access to the value indicating whether the object can be redone.
            </summary>
        </member>
        <member name="E:Noname.ComponentModel.IReversible.ChangeRemembered">
            <summary>
            Occurs when a change was remembered.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.IReversible.Undo">
            <summary>
            Undoes the object state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object cannot be undone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.IReversible.Redo">
            <summary>
            Redoes the object state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object cannot be redone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.IReversible.ForgetChanges">
            <summary>
            Removes the remembered changes.
            </summary>
        </member>
        <member name="T:Noname.ComponentModel.NotifyingProperty`1">
            <summary>
            Represents a property that notify about its value change.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/> class.
            </summary>
            <param name="valuePredicate">The method to define values the property can set.</param>
            <exception cref="T:System.ArgumentException">The default value does not satisfy <paramref name="valuePredicate"/>.</exception>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/> class.
            </summary>
            <param name="value">The start value of the property.</param>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.#ctor(System.Predicate{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/> class.
            </summary>
            <param name="value">The start value of the property.</param>
            <param name="valuePredicate">The method to define values the property can set.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> does not satisfy <paramref name="valuePredicate"/>.</exception>
        </member>
        <member name="P:Noname.ComponentModel.NotifyingProperty`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="E:Noname.ComponentModel.NotifyingProperty`1.ValueChanged">
            <summary>
            Occurs when the value changes.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.
            </summary>
            <param name="obj">The object to compare with the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.</param>
            <returns>true if the specified object is equal to the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.GetHashCode">
            <summary>
            Returns a hash code for the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.</returns>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingProperty`1.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/>.</returns>
        </member>
        <member name="T:Noname.ComponentModel.NotifyingObject">
            <summary>
            Represents base class for all objects that notify of its properties change.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.NotifyingObject"/> class.
            </summary>
        </member>
        <member name="E:Noname.ComponentModel.NotifyingObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.NotifyingObject.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:Noname.ComponentModel.NotifyingObject.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="T:Noname.ComponentModel.ReversibleProperty`1">
            <summary>
            Represents a <see cref="T:Noname.ComponentModel.NotifyingProperty`1"/> modification that can be undone or redone. Such property does not remember its old value automatically.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ReversibleProperty`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ReversibleProperty`1"/> class.
            </summary>
            <param name="valuePredicate">The method to define values the property can set.</param>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ReversibleProperty`1"/> class.
            </summary>
            <param name="value">The start value of the property.</param>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.#ctor(System.Predicate{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.ComponentModel.ReversibleProperty`1"/> class.
            </summary>
            <param name="valuePredicate">The method to define values the property can set.</param>
            <param name="value">The start value of the property.</param>
        </member>
        <member name="P:Noname.ComponentModel.ReversibleProperty`1.CanUndoProperty">
            <summary>
            Provides access to the value indicating whether the collection can be undone.
            </summary>
        </member>
        <member name="P:Noname.ComponentModel.ReversibleProperty`1.CanRedoProperty">
            <summary>
            Provides access to the value indicating whether the collection can be redone.
            </summary>
        </member>
        <member name="E:Noname.ComponentModel.ReversibleProperty`1.ChangeRemembered">
            <summary>
            Occurs when a change was remembered.
            </summary>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.Undo">
            <summary>
            Undoes the value of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">The property cannot be undone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.Redo">
            <summary>
            Redoes the value of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">The property cannot be redone.</exception>
        </member>
        <member name="M:Noname.ComponentModel.ReversibleProperty`1.ForgetChanges">
            <summary>
            Removes the remembered changes.
            </summary>
        </member>
        <member name="T:Noname.Net.ConnectionBase">
            <summary>
            Represents a connection.
            </summary>
        </member>
        <member name="F:Noname.Net.ConnectionBase.DefaultMaxPacketSize">
            <summary>
            The default value for the <see cref="F:Noname.Net.ConnectionBase.MaxPacketSize"/>.
            </summary>
        </member>
        <member name="F:Noname.Net.ConnectionBase.MaxPacketSize">
            <summary>
            The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.
            </summary>
        </member>
        <member name="P:Noname.Net.ConnectionBase.PreSendBuffer">
            <summary>
            Gets the pre send buffer to write a data to send. It is only used after <see cref="M:Noname.Net.ConnectionBase.AllocatePreSendBuffer(System.Int32)"/> invoke.
            </summary>
        </member>
        <member name="P:Noname.Net.ConnectionBase.PreSendBufferSize">
            <summary>
            Gets the pre send buffer size.
            </summary>
        </member>
        <member name="M:Noname.Net.ConnectionBase.Start">
            <summary>
            Initializes the connection.
            </summary>
        </member>
        <member name="M:Noname.Net.ConnectionBase.Stop">
            <summary>
            Stops the connection.
            </summary>
        </member>
        <member name="M:Noname.Net.ConnectionBase.AllocatePreSendBuffer(System.Int32)">
            <summary>
            Allocates pre send buffer to send.
            </summary>
            <returns>An index in <see cref="P:Noname.Net.ConnectionBase.PreSendBuffer"/> to write a data to send.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is not between 0 and <see cref="F:Noname.Net.ConnectionBase.MaxPacketSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The connection is not working.</exception>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedureBase">
            <summary>
            Represents a base for client local procedure.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.RPCClientConnectionProvider">
            <summary>
            Represents a client connection provider using by a <see cref="T:Noname.Net.RPC.RPCServer`1"/>.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCClientConnectionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCClientConnectionProvider"/> class.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.RemoteProcedure">
            <summary>
            Represents a base for remote procedure that does not have any parameters.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.RemoteProcedure`1">
            <summary>
            Represents a base for remote procedure that has one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.RemoteProcedure`2">
            <summary>
            Represents a base for remote procedure that has one parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.RemoteProcedure`3">
            <summary>
            Represents a base for remote procedure that has one parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.RemoteProcedure`4">
            <summary>
            Represents a base for remote procedure that has one parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.RPCClient">
            <summary>
            Represents a client that works through the remote procedures calling.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCClient"/> class with default values.
            </summary>
            <param name="ipAddress">An ip address of the server a client try to connect to.</param>
            <param name="port">A port using for udp and tcp connections.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCClient"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="ipAddress">An ip address of the server a client try to connect to.</param>
            <param name="port">A port using for udp and tcp connections.</param>
        </member>
        <member name="P:Noname.Net.RPC.RPCClient.TCPSentByteCount">
            <summary>
            Gets the number of sent bytes by tcp.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCClient.TCPReceivedByteCount">
            <summary>
            Gets the number of received bytes by tcp.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCClient.UDPSentByteCount">
            <summary>
            Gets the number of sent bytes by udp.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCClient.UDPReceivedByteCount">
            <summary>
            Gets the number of received bytes by udp.
            </summary>
        </member>
        <member name="E:Noname.Net.RPC.RPCClient.Connected">
            <summary>
            Occurs when the client connects to the server.
            </summary>
        </member>
        <member name="E:Noname.Net.RPC.RPCClient.Disconnected">
            <summary>
            Occurs when the client disconnects from the server.
            </summary>
        </member>
        <member name="E:Noname.Net.RPC.RPCClient.FailedToConnect">
            <summary>
            Occurs when the client fails to connect to the server.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.TCPCall(Noname.Net.RPC.RemoteProcedure)">
            <summary>
            Invokes a specified procedure on the server by tcp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.TCPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0)">
            <summary>
            Invokes a specified procedure on the server by tcp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.TCPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1)">
            <summary>
            Invokes a specified procedure on the server by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.TCPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes a specified procedure on the server by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.TCPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes a specified procedure on the server by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.UDPCall(Noname.Net.RPC.RemoteProcedure)">
            <summary>
            Invokes a specified procedure on the server by udp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.UDPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0)">
            <summary>
            Invokes a specified procedure on the server by udp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.UDPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1)">
            <summary>
            Invokes a specified procedure on the server by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.UDPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes a specified procedure on the server by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.UDPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes a specified procedure on the server by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.InitializeLocalProcedures">
            <summary>
            Is invoked to define local procedures.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.DefineLocalProcedure(System.Boolean,System.Action)">
            <summary>
            Defines a new procedure that is invoked remotely by the server.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.DefineLocalProcedure``1(System.Boolean,System.Action{``0},Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Defines a new procedure that is invoked remotely by the server.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter">A bit converter to convert an argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.DefineLocalProcedure``2(System.Boolean,System.Action{``0,``1},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1})">
            <summary>
            Defines a new procedure that is invoked remotely by the server.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.DefineLocalProcedure``3(System.Boolean,System.Action{``0,``1,``2},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2})">
            <summary>
            Defines a new procedure that is invoked remotely by the server.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCClient.DefineLocalProcedure``4(System.Boolean,System.Action{``0,``1,``2,``3},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2},Noname.BitConversion.IReliableBitConverter{``3})">
            <summary>
            Defines a new procedure that is invoked remotely by the server.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <param name="converter4">A bit converter to convert a fourth argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="T:Noname.Net.RPC.ProcedureBase">
            <summary>
            Represents a base for procedure
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.LocalProcedureBase">
            <summary>
            Represents a base for local procedure.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedureBase`1">
            <summary>
            Represents a base for server local procedure.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedure`1">
            <summary>
            Represents a server local procedure that does not have any parameters.
            </summary>
            <typeparam name="TClient">The type of clients that uses in the server.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedure`2">
            <summary>
            Represents a server local procedure that has one parameter.
            </summary>
            <typeparam name="TClient">The type of clients that uses in the server.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedure`3">
            <summary>
            Represents a server local procedure that has two parameters.
            </summary>
            <typeparam name="TClient">The type of clients that uses in the server.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedure`4">
            <summary>
            Represents a server local procedure that has three parameters.
            </summary>
            <typeparam name="TClient">The type of clients that uses in the server.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ServerLocalProcedure`5">
            <summary>
            Represents a server local procedure that has four parameters.
            </summary>
            <typeparam name="TClient">The type of clients that uses in the server.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedure">
            <summary>
            Represents a client local procedure that does not have any parameters.
            </summary>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedure`1">
            <summary>
            Represents a client local procedure that has one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedure`2">
            <summary>
            Represents a client local procedure that has two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedure`3">
            <summary>
            Represents a client local procedure that has three parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.ClientLocalProcedure`4">
            <summary>
            Represents a client local procedure that has four parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="T:Noname.Net.RPC.RPCServer`1">
            <summary>
            Represents a server that works through the remote procedures calling.
            </summary>
            <typeparam name="TClient">The specified type of the client.</typeparam>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCServer`1"/> class with default values.
            </summary>
            <param name="port">The port using for udp and tcp connections.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCServer`1"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="port">The port using for udp and tcp connections.</param>
        </member>
        <member name="P:Noname.Net.RPC.RPCServer`1.SendThreadCount">
            <summary>
            Gets the number of the threads to send bytes.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCServer`1.SenderCount">
            <summary>
            Gets the number of the clients that need to send bytes.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCServer`1.ReceiverCount">
            <summary>
            Gets the number of the client that is handled by the server.
            </summary>
        </member>
        <member name="E:Noname.Net.RPC.RPCServer`1.ClientConnected">
            <summary>
            Occurs when a client connects to the server.
            </summary>
        </member>
        <member name="E:Noname.Net.RPC.RPCServer`1.ClientDisconnected">
            <summary>
            Occurs when a client disconnects from the server.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DisconnectClient(`0)">
            <summary>
            Disconnects a specified client.
            </summary>
            <param name="client">The client to disconnect.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall(Noname.Net.RPC.RemoteProcedure)">
            <summary>
            Invokes the procedure on all clients by tcp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall(Noname.Net.RPC.RemoteProcedure,`0)">
            <summary>
            Invokes the procedure on a specified client by tcp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall(Noname.Net.RPC.RemoteProcedure,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall(Noname.Net.RPC.RemoteProcedure,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0)">
            <summary>
            Invokes the procedure on all clients by tcp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,`0)">
            <summary>
            Invokes the procedure on a specified client by tcp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1)">
            <summary>
            Invokes the procedure on all clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,`0)">
            <summary>
            Invokes the procedure on a specified client by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the procedure on all clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,`0)">
            <summary>
            Invokes the procedure on a specified client by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the procedure on all clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,`0)">
            <summary>
            Invokes the procedure on a specified client by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.TCPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by tcp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall(Noname.Net.RPC.RemoteProcedure)">
            <summary>
            Invokes the procedure on all clients by udp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall(Noname.Net.RPC.RemoteProcedure,`0)">
            <summary>
            Invokes the procedure on a specified client by udp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall(Noname.Net.RPC.RemoteProcedure,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall(Noname.Net.RPC.RemoteProcedure,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <param name="procedure">The procedure to invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0)">
            <summary>
            Invokes the procedure on all clients by udp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,`0)">
            <summary>
            Invokes the procedure on a specified client by udp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``1(Noname.Net.RPC.RemoteProcedure{``0},``0,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument">The argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1)">
            <summary>
            Invokes the procedure on all clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,`0)">
            <summary>
            Invokes the procedure on a specified client by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``2(Noname.Net.RPC.RemoteProcedure{``0,``1},``0,``1,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the procedure on all clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,`0)">
            <summary>
            Invokes the procedure on a specified client by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``3(Noname.Net.RPC.RemoteProcedure{``0,``1,``2},``0,``1,``2,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the procedure on all clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,`0)">
            <summary>
            Invokes the procedure on a specified client by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="client">The client that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.UDPCall``4(Noname.Net.RPC.RemoteProcedure{``0,``1,``2,``3},``0,``1,``2,``3,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Invokes the procedure on specified clients by udp.
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="procedure">The procedure to invoke.</param>
            <param name="argument1">The first argument for the procedure invoke.</param>
            <param name="argument2">The second argument for the procedure invoke.</param>
            <param name="argument3">The third argument for the procedure invoke.</param>
            <param name="argument4">The fourth argument for the procedure invoke.</param>
            <param name="clients">The clients that must perform the procedure.</param>
            <param name="syncRoot">The object to synchronize the access to <paramref name="clients"/>.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.InitializeLocalProcedures">
            <summary>
            Is invoked to define local procedures.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DefineLocalProcedure(System.Boolean,System.Action{`0})">
            <summary>
            Defines a new procedure that is invoked remotely by a client.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DefineLocalProcedure``1(System.Boolean,System.Action{`0,``0},Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Defines a new procedure that is invoked remotely by a client.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter">A bit converter to convert an argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DefineLocalProcedure``2(System.Boolean,System.Action{`0,``0,``1},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1})">
            <summary>
            Defines a new procedure that is invoked remotely by a client.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DefineLocalProcedure``3(System.Boolean,System.Action{`0,``0,``1,``2},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2})">
            <summary>
            Defines a new procedure that is invoked remotely by a client.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer`1.DefineLocalProcedure``4(System.Boolean,System.Action{`0,``0,``1,``2,``3},Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2},Noname.BitConversion.IReliableBitConverter{``3})">
            <summary>
            Defines a new procedure that is invoked remotely by a client.
            </summary>
            <param name="mainThread">If true the procedure is invoked from the main thread; otherwise, the procedure is called from a thread of the thread pool.</param>
            <param name="executingAction">The action that executes when the procedure is called.</param>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <param name="converter4">A bit converter to convert a fourth argument of the procedure.</param>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="T:Noname.Net.RPC.RPCServer">
            <summary>
            Represents a base implemention of the <see cref="T:Noname.Net.RPC.RPCServer`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCServer"/> class.
            </summary>
            <param name="port">A port using for udp and tcp connections.</param>
        </member>
        <member name="M:Noname.Net.RPC.RPCServer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.RPC.RPCServer"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="port">The port using for udp and tcp connections.</param>
        </member>
        <member name="T:Noname.Net.RPC.RPCConnectionBase">
            <summary>
            Represents a connection that works through the remote procedures calling.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCConnectionBase.TCPPreSendBufferSize">
            <summary>
            Gets the tcp pre send buffer size.
            </summary>
        </member>
        <member name="P:Noname.Net.RPC.RPCConnectionBase.UDPPreSendBufferSize">
            <summary>
            Gets the udp pre send buffer size.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.Start">
            <summary>
            Starts the connection.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.Stop">
            <summary>
            Stops the connection.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.InitializeRemoteProcedures">
            <summary>
            Is invoked to define remote procedures.
            </summary>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.DefineRemoteProcedure">
            <summary>
            Defines a new procedure that is called remotely on another side.
            </summary>
            <returns>A new procedure that is called remotely on another side.</returns>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.DefineRemoteProcedure``1(Noname.BitConversion.IReliableBitConverter{``0})">
            <summary>
            Defines a new procedure that is called remotely on another side.
            </summary>
            <param name="converter">A bit converter to convert an argument of the procedure.</param>
            <returns>A new procedure that is called remotely on another side.</returns>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.DefineRemoteProcedure``2(Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1})">
            <summary>
            Defines a new procedure that is called remotely on another side.
            </summary>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <returns>A new procedure that is called remotely on another side.</returns>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.DefineRemoteProcedure``3(Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2})">
            <summary>
            Defines a new procedure that is called remotely on another side.
            </summary>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <returns>A new procedure that is called remotely on another side.</returns>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="M:Noname.Net.RPC.RPCConnectionBase.DefineRemoteProcedure``4(Noname.BitConversion.IReliableBitConverter{``0},Noname.BitConversion.IReliableBitConverter{``1},Noname.BitConversion.IReliableBitConverter{``2},Noname.BitConversion.IReliableBitConverter{``3})">
            <summary>
            Defines a new procedure that is called remotely on another side.
            </summary>
            <param name="converter1">A bit converter to convert a first argument of the procedure.</param>
            <param name="converter2">A bit converter to convert a second argument of the procedure.</param>
            <param name="converter3">A bit converter to convert a third argument of the procedure.</param>
            <param name="converter4">A bit converter to convert a fourth argument of the procedure.</param>
            <returns>A new procedure that is called remotely on another side.</returns>
            <exception cref="T:System.ArgumentNullException">A one of the converters is null.</exception>
        </member>
        <member name="T:Noname.Net.TCPClientReceiveBytes">
            <summary>
            Represents a method that receives bytes from a tcp client.
            </summary>
            <param name="buffer">The buffer containing received bytes.</param>
            <param name="count">The number of received bytes.</param>
        </member>
        <member name="T:Noname.Net.UDPClientReceiveBytes">
            <summary>
            Represents a method that receives bytes from a udp client.
            </summary>
            <param name="buffer">The buffer containing received bytes.</param>
            <param name="count">The number of received bytes.</param>
        </member>
        <member name="T:Noname.Net.UDPServerReceiveBytes">
            <summary>
            Represents a method that receives bytes from a udp server.
            </summary>
            <param name="client">A client that sends bytes.</param>
            <param name="buffer">A buffer containing received bytes.</param>
            <param name="count">A number of received bytes.</param>
        </member>
        <member name="T:Noname.Net.TCPServerReceiveBytes`1">
            <summary>
            Represents a method that receives bytes from a tcp server.
            </summary>
            <typeparam name="TClientConnectionProvider">The type of the client on the server.</typeparam>
            <param name="client">A client that sends bytes.</param>
            <param name="buffer">A buffer containing received bytes.</param>
            <param name="count">A number of received bytes.</param>
        </member>
        <member name="T:Noname.Net.WriteSend">
            <summary>
            Defines methods to write a data to the send buffer.
            </summary>
            <param name="buffer">The send buffer to receive the a data.</param>
            <param name="index">The index at which the data write.</param>
        </member>
        <member name="T:Noname.Net.TCPConnectionBase">
            <summary>
            Represents a tcp connection.
            </summary>
        </member>
        <member name="F:Noname.Net.TCPConnectionBase.DefaultSendBufferSize">
            <summary>
            Default value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> property.
            </summary>
        </member>
        <member name="F:Noname.Net.TCPConnectionBase.DefaultReceiveBufferSize">
            <summary>
            Default value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> property.
            </summary>
        </member>
        <member name="F:Noname.Net.TCPConnectionBase.DefaultSendTimeout">
            <summary>
            Default value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> property.
            </summary>
        </member>
        <member name="T:Noname.Net.UDPClient">
            <summary>
            Represents a udp client.
            </summary>
        </member>
        <member name="M:Noname.Net.UDPClient.#ctor(System.String,System.Int32,Noname.Net.UDPClientReceiveBytes)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.UDPServer"/> class.
            </summary>
            <param name="ipAddress">The ip address of the server the client connects to.</param>
            <param name="port">The port of the server the client connects to.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.UDPClient.Start">
            <summary>
            Starts the client.
            </summary>
            <exception cref="T:System.InvalidOperationException">The client is already working.</exception>
        </member>
        <member name="M:Noname.Net.UDPClient.Stop">
            <summary>
            Stops the client.
            </summary>
            <exception cref="T:System.InvalidOperationException">Pre send buffer is opened in a some thread.</exception>
        </member>
        <member name="M:Noname.Net.UDPClient.ClosePreSendBuffer">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
        </member>
        <member name="T:Noname.Net.UDPConnectionBase">
            <summary>
            Represents a udp base connection.
            </summary>
        </member>
        <member name="F:Noname.Net.UDPConnectionBase.UDPMaxBufferSize">
            <summary>
            UDP packet size cannot be greater this value.
            </summary>
        </member>
        <member name="P:Noname.Net.UDPConnectionBase.SentByteCount">
            <summary>
            Gets the number of sent bytes.
            </summary>
        </member>
        <member name="P:Noname.Net.UDPConnectionBase.ReceivedByteCount">
            <summary>
            Gets the number of received bytes.
            </summary>
        </member>
        <member name="T:Noname.Net.UDPServer">
            <summary>
            Represents a udp server.
            </summary>
        </member>
        <member name="M:Noname.Net.UDPServer.#ctor(System.Int32,Noname.Net.UDPServerReceiveBytes)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.UDPServer"/> class.
            </summary>
            <param name="port">The port using for the connection.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.UDPServer.Start">
            <summary>
            Starts the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The server is already working.</exception>
        </member>
        <member name="M:Noname.Net.UDPServer.Stop">
            <summary>
            Stops the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">Pre send buffer is opened in a some thread.</exception>
        </member>
        <member name="M:Noname.Net.UDPServer.ClosePreSendBuffer(System.Net.IPEndPoint)">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
            <param name="client">The client that need send.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.UDPServer.ClosePreSendBuffer(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
            <param name="clients">The clients that need send.</param>
            <exception cref="T:System.NullReferenceException">A one of the <paramref name="clients"/> is null.</exception>
        </member>
        <member name="T:Noname.Net.TCPClient">
            <summary>
            Represents a tcp client.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPClient.#ctor(System.String,System.Int32,Noname.Net.TCPClientReceiveBytes)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPClient"/> class with default values.
            </summary>
            <param name="ipAddress">The ip address of the server the client connects to.</param>
            <param name="port">The port of the server the client connects to.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="ipAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is less than 0 or greater than 65535.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.TCPClient.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,Noname.Net.TCPClientReceiveBytes)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPClient"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="ipAddress">The ip address of the server the client connects to.</param>
            <param name="port">The port of the server the client connects to.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxPacketSize"/> is less than 0 or <paramref name="sendBufferSize"/> is less than 0 or <paramref name="receiveBufferSize"/> is less than 0 or <paramref name="port"/> is less than 0 or greater than 65535.</exception>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="ipAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="P:Noname.Net.TCPClient.IPAddress">
            <summary>
            Gets the ip address of the server the connected to.
            </summary>
            <exception cref="T:System.NullReferenceException">The client is not connected.</exception>
        </member>
        <member name="P:Noname.Net.TCPClient.SentByteCount">
            <summary>
            Gets the number of sent bytes.
            </summary>
            <exception cref="T:System.NullReferenceException">The client is not connected.</exception>
        </member>
        <member name="P:Noname.Net.TCPClient.ReceivedByteCount">
            <summary>
            Gets the number of received bytes.
            </summary>
            <exception cref="T:System.NullReferenceException">The client is not connected.</exception>
        </member>
        <member name="P:Noname.Net.TCPClient.Key">
            <summary>
            Gets the unique key of the client on the server.
            </summary>
        </member>
        <member name="E:Noname.Net.TCPClient.Connected">
            <summary>
            Occurs when the client connects to the server.
            </summary>
        </member>
        <member name="E:Noname.Net.TCPClient.FailedToConnect">
            <summary>
            Occurs when the client fails to connect to the server.
            </summary>
        </member>
        <member name="E:Noname.Net.TCPClient.Disconnected">
            <summary>
            Occurs when the client disconnects from the server.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPClient.Start">
            <summary>
            Initializes the client and starts the attempt to connect.
            </summary>
            <exception cref="T:System.InvalidOperationException">The client expects the answer from the server or is already connected.</exception>
        </member>
        <member name="M:Noname.Net.TCPClient.Stop">
            <summary>
            Stops the client.
            </summary>
            <exception cref="T:System.InvalidOperationException">Pre send buffer is opened in a some thread after <see cref="E:Noname.Net.TCPClient.Disconnected"/> event calling.</exception>
        </member>
        <member name="M:Noname.Net.TCPClient.ClosePreSendBuffer">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
        </member>
        <member name="T:Noname.Net.TCPConnectionProvider">
            <summary>
            Represents a tcp connection provider.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPConnectionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPConnectionProvider"/> class.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPConnectionProvider.Connected">
            <summary>
            Gets the value to indicate whether the connection is working.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPConnectionProvider.IPAddress">
            <summary>
            Gets the ip address of the tcp connection provider.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPConnectionProvider.Port">
            <summary>
            Gets the port of the tcp connection provider.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPConnectionProvider.SentByteCount">
            <summary>
            Gets the number of sent bytes by the tcp connection provider.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPConnectionProvider.ReceivedByteCount">
            <summary>
            Gets the number of received bytes by the tcp connection provider.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPConnectionProvider.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Noname.Net.TCPServer">
            <summary>
            Represents a base implemention of the <see cref="T:Noname.Net.TCPServer`1"/> class.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPServer.#ctor(System.Int32,Noname.Net.TCPServerReceiveBytes{Noname.Net.TCPConnectionProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPServer`1"/> class using default <see cref="T:System.Net.Sockets.Socket"/> properties.
            </summary>
            <param name="port">The port using for the connection.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Noname.Net.TCPServerReceiveBytes{Noname.Net.TCPConnectionProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPServer`1"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="port">The port using for the connection.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxPacketSize"/> is less than 0 or <paramref name="sendBufferSize"/> is less than 0 or <paramref name="receiveBufferSize"/> is less than 0.</exception>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="T:Noname.Net.TCPServer`1">
            <summary>
            Represents a tcp server.
            </summary>
            <typeparam name="TClientConnectionProvider">The specified type of the client connection provider.</typeparam>
        </member>
        <member name="M:Noname.Net.TCPServer`1.#ctor(System.Int32,Noname.Net.TCPServerReceiveBytes{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPServer`1"/> class with default properties.
            </summary>
            <param name="port">The port using for the connection.</param>
            <param name="bytesReceived">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytesReceived"/> is null.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Noname.Net.TCPServerReceiveBytes{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Net.TCPServer`1"/> class.
            </summary>
            <param name="maxPacketSize">The max packet size of send and receive. If a buffer becomes greater than this value an exception throws.</param>
            <param name="sendBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> of the sockets the connection use.</param>
            <param name="receiveBufferSize">The value of the <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> of the sockets the connection use.</param>
            <param name="sendTimeout">The value of the <see cref="P:System.Net.Sockets.Socket.SendTimeout"/> of the sockets the connection use.</param>
            <param name="port">The port using for the connection.</param>
            <param name="receiveBytes">Encapsulates methods that is called when bytes is received.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxPacketSize"/> is less than 0 or <paramref name="sendBufferSize"/> is less than 0 or <paramref name="receiveBufferSize"/> is less than 0.</exception>
            <exception cref="T:System.NullReferenceException"><see cref="P:System.Threading.SynchronizationContext.Current"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="receiveBytes"/> is null.</exception>
        </member>
        <member name="P:Noname.Net.TCPServer`1.SendThreadCount">
            <summary>
            Gets the number of the threads to send bytes.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPServer`1.SenderCount">
            <summary>
            Gets the number of the clients that need to send bytes.
            </summary>
        </member>
        <member name="P:Noname.Net.TCPServer`1.ReceiverCount">
            <summary>
            Gets the number of the client that is handled by the server.
            </summary>
        </member>
        <member name="E:Noname.Net.TCPServer`1.ClientConnected">
            <summary>
            Occurs when a client connects to the server.
            </summary>
        </member>
        <member name="E:Noname.Net.TCPServer`1.ClientDisconnected">
            <summary>
            Occurs when a client disconnects from the server.
            </summary>
        </member>
        <member name="M:Noname.Net.TCPServer`1.Start">
            <summary>
            Initializes the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The server is already working.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer`1.Stop">
            <summary>
            Stops the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">Pre send buffer is opened in a some thread.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer`1.ClosePreSendBuffer(`0)">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
            <param name="client">The client that need send.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="client"/> does not belong to this server.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer`1.ClosePreSendBuffer(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Completes writing to the pre send buffer.
            </summary>
            <param name="clients">The clients that need send.</param>
            <exception cref="T:System.NullReferenceException">A one of the <paramref name="clients"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A one of the <paramref name="clients"/> does not belong to the server.</exception>
        </member>
        <member name="M:Noname.Net.TCPServer`1.DisconnectClient(`0)">
            <summary>
            Disconnects a specified client.
            </summary>
            <param name="client">The client to disconnect.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is null.</exception>
        </member>
        <member name="T:Noname.BufferHelper">
            <summary>
            Provides additional methods for byte buffers.
            </summary>
        </member>
        <member name="M:Noname.BufferHelper.FillWithZeros(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fills the buffer with zeros.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The 32-bit index at which filling of the buffer begins.</param>
            <param name="count">The 32-bit number of bytes to fill.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:Noname.BufferHelper.FillWithZeros(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Fills the buffer with zeros.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The 64-bit index at which filling of the buffer begins.</param>
            <param name="count">The 64-bit number of bytes to fill.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <paramref name="buffer"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from the <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:Noname.BufferHelper.CheckSize(System.Byte[]@,System.Int32)">
            <summary>
            Initializes the buffer by a specified size if the buffer is null; otherwise, doubles the size of the buffer while the size is less than a specified size. 
            </summary>
            <param name="buffer">The buffer which size is to check.</param>
            <param name="size">The 32-bit size of the buffer that is need.</param>
            <returns>true if the size of the buffer changes; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.BufferHelper.CheckSize(System.Byte[]@,System.Int64)">
            <summary>
            Initializes the buffer by a specified size if the buffer is null; otherwise, doubles the size of the buffer while the size is less than a specified size. 
            </summary>
            <param name="buffer">The buffer which size is to check.</param>
            <param name="size">The 64-bit size of the buffer that is need.</param>
            <returns>true if the size of the buffer changes; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="T:Noname.BufferHelper`1">
            <summary>
            Provides additional methods for buffers.
            </summary>
        </member>
        <member name="M:Noname.BufferHelper`1.CheckSize(`0[]@,System.Int32)">
            <summary>
            Initializes the buffer by a specified size if the buffer is null; otherwise, doubles the size of the buffer while the size is less than a specified size. 
            </summary>
            <param name="buffer">The buffer which size is to check.</param>
            <param name="size">The 32-bit size of the buffer that is need.</param>
            <returns>true if the size of the buffer changes; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="M:Noname.BufferHelper`1.CheckSize(`0[]@,System.Int64)">
            <summary>
            Initializes the buffer by a specified size if the buffer is null; otherwise, doubles the size of the buffer while the size is less than a specified size. 
            </summary>
            <param name="buffer">The buffer which size is to check.</param>
            <param name="size">The 64-bit size of the buffer that is need.</param>
            <returns>true if the size of the buffer changes; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is less than 0.</exception>
        </member>
        <member name="T:Noname.StringHelper">
            <summary>
            Provides additional methods for <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:Noname.StringHelper.Test(System.String,Noname.CharFilter)">
            <summary>
            Tests the string whether it has only chars defined by a specified filter.
            </summary>
            <param name="str">The string to test.</param>
            <param name="filter">The filter determining chars that is allowed to have.</param>
            <returns>true if a specified string has only chars defined by a specified filter; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null.</exception>
        </member>
        <member name="M:Noname.StringHelper.IsEmail(System.String)">
            <summary>
            Checks whether the string is e-mail address.
            </summary>
            <param name="str">The string to check.</param>
            <returns>true if the string is e-mail address; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null.</exception>
        </member>
        <member name="T:Noname.CharHelper">
            <summary>
            Provides additional methods for <see cref="T:System.Char"/> type.
            </summary>
        </member>
        <member name="M:Noname.CharHelper.IsRU(System.Char)">
            <summary>
            Returns true if the char is a Russian letter; otherwise, false.
            </summary>
            <param name="c">The char to check.</param>
            <returns>true if the char is a Russian letter; otherwise, false.</returns>
        </member>
        <member name="M:Noname.CharHelper.IsEN(System.Char)">
            <summary>
            Returns true if the char is an English letter; otherwise, false.
            </summary>
            <param name="c">The char to check.</param>
            <returns>true if the char is an English letter; otherwise, false.</returns>
        </member>
        <member name="T:Noname.Threading.MultiThreadHandler">
            <summary>
            Represents a multi thread handler.
            </summary>
        </member>
        <member name="M:Noname.Threading.MultiThreadHandler.#ctor(System.Threading.ParameterizedThreadStart)">
            <summary>
            Initializes a new instance of the <see cref="T:Noname.Threading.MultiThreadHandler"/> class.
            </summary>
            <param name="handler">A method representing the handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is null.</exception>
        </member>
        <member name="P:Noname.Threading.MultiThreadHandler.ThreadCount">
            <summary>
            Gets the thread count.
            </summary>
        </member>
        <member name="P:Noname.Threading.MultiThreadHandler.Busyness">
            <summary>
            Gets the busyness meaning the working thread count.
            </summary>
        </member>
        <member name="M:Noname.Threading.MultiThreadHandler.Start">
            <summary>
            Starts <see cref="T:Noname.Threading.MultiThreadHandler"/>.
            </summary>
        </member>
        <member name="M:Noname.Threading.MultiThreadHandler.Start(System.Int32)">
            <summary>
            Starts <see cref="T:Noname.Threading.MultiThreadHandler"/>.
            </summary>
            <param name="minThreadCount">The min number of threads to handle.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minThreadCount"/> is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Noname.Threading.MultiThreadHandler"/> is already started.</exception>
        </member>
        <member name="M:Noname.Threading.MultiThreadHandler.Stop">
            <summary>
            Stops <see cref="T:Noname.Threading.MultiThreadHandler"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Noname.Threading.MultiThreadHandler"/> is not started.</exception>
        </member>
        <member name="T:Noname.Threading.HandlingThread">
            <summary>
            Represents thread that is a part of a <see cref="T:Noname.Threading.MultiThreadHandler"/>.
            </summary>
        </member>
        <member name="M:Noname.Threading.HandlingThread.SetBusy">
            <summary>
            Makes the thread busy.
            </summary>
            <exception cref="T:System.InvalidOperationException">The thread is already busy.</exception>
        </member>
        <member name="M:Noname.Threading.HandlingThread.SetNonBusy">
            <summary>
            Makes the thread not busy.
            </summary>
            <exception cref="T:System.InvalidOperationException">The thread is already not busy.</exception>
        </member>
        <member name="M:Noname.Threading.HandlingThread.UnloadThreadIfNecessary">
            <summary>
            Unloads the thread if the thread is already not necessary.
            </summary>
            <returns>true if the thread can be stopped; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">The thread is already unloaded.</exception>
        </member>
        <member name="T:Noname.CharFilter">
            <summary>
            Specifies char filter.
            </summary>
        </member>
        <member name="F:Noname.CharFilter.None">
            <summary>
            Specifies all chars.
            </summary>
        </member>
        <member name="F:Noname.CharFilter.Letters">
            <summary>
            Specifies letters.
            </summary>
        </member>
        <member name="F:Noname.CharFilter.Digits">
            <summary>
            Specifies digits.
            </summary>
        </member>
        <member name="F:Noname.CharFilter.RU">
            <summary>
            Specifies Russian letters.
            </summary>
        </member>
        <member name="F:Noname.CharFilter.EN">
            <summary>
            Specifies English letters.
            </summary>
        </member>
    </members>
</doc>
